generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EmployeeLevel {
  ADMIN
  TRAINER
  STAFF
  MANAGER
}

model User {
  id                Int               @id @default(autoincrement())
  username          String            @unique
  email             String            @unique
  password          String
  createdAt         DateTime          @default(now())
  isOnline          Boolean           @default(false)
  profilePlan       ProfilePlan?
  userWorkouts      UserWorkout[]
  visits            Visits[]       // Assuming many Trainers can be linked to one User
}

model ProfilePlan {
  id            Int     @id @default(autoincrement())
  firstName     String
  lastName      String
  userId        Int     @unique
  cellPhone     String?
  city          String?
  currentStatus String?
  homeClub      String?
  state         String?
  zipCode       String?
  memberSince   String?
  user          User    @relation(fields: [userId], references: [id])
}

model Visits {
  id            Int           @id @default(autoincrement())
  userId        Int
  checkin       DateTime
  checkout      DateTime?
  user          User          @relation(fields: [userId], references: [id])
  userWorkouts  UserWorkout[] @relation("WorkoutToUserWorkout")
}

model UserWorkout {
  id                Int                 @id @default(autoincrement())
  userId            Int
  editedAt          DateTime            @default(now())
  workout           String
  user              User                @relation(fields: [userId], references: [id])
  favoritedExercise FavoritedExercise[] @relation("UserWorkoutFavoritedExercises")
  visits            Visits[]            @relation("WorkoutToUserWorkout")
}

model FavoritedExercise {
  id               Int           @id @default(autoincrement())
  name             String        @unique
  equipment        String
  gifUrl           String
  target           String
  bodyPart         String
  instructions     String[]
  secondaryMuscles String[]
  userWorkouts     UserWorkout[] @relation("UserWorkoutFavoritedExercises")
}

model Employee {
  id             Int            @id @default(autoincrement())
  username       String         @unique
  email          String         @unique
  password       String
  createdAt      DateTime       @default(now())
  employeeLevel  EmployeeLevel
  admins         Admin[]        // Changed from Admin? to Admin[] (one-to-many)
  trainers       Trainer[]      // Changed from Trainer? to Trainer[] (one-to-many)
}

model Admin {
  id         Int       @id @default(autoincrement())
  employeeId Int      
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) 
  employee   Employee  @relation(fields: [employeeId], references: [id])
}

model Trainer {
  id           Int               @id @default(autoincrement())
  clientNotes  String
  events       String           
  employeeId   Int              
  createdAt    DateTime          @default(now())
  employee     Employee          @relation(fields: [employeeId], references: [id])
  schedules    TrainerSchedule[] // Multiple schedule entries
}

// set up Trainer scheduleing
model TrainerSchedule {
  id         Int      @id @default(autoincrement())
  trainerId  Int
  startTime  DateTime // Start of the scheduled slot
  endTime    DateTime // End of the scheduled slot
  createdAt  DateTime @default(now())
  trainer    Trainer  @relation(fields: [trainerId], references: [id])
}
